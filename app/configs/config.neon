php:
	date.timezone: Europe/Bratislava
	zlib.output_compression: yes
	max_execution_time: 120

nette:
	container:
		debugger: false  # aktivuje panel v Debugger baru

	session:
		autoStart: true
		expiration: '+1 year'
		cookie_path: '/'
		cookie_domain: '.tra.com'

	latte:
		macros:
			- Extras\ImageMacro
			- Extras\Macros

	security:
		frames:


extensions:
	console: Kdyby\Console\DI\ConsoleExtension
	events: Kdyby\Events\DI\EventsExtension
	annotations: Kdyby\Annotations\DI\AnnotationsExtension
	doctrine: Kdyby\Doctrine\DI\OrmExtension


parameters:

	security:
		salt: '8723lks762ngknl90835bkd'
		sender: 'noreply@tralandia.sk'

	envOptions:
		sendEmail: TRUE

	domainMask: "<language ([a-z]{2}|www)>.<primaryLocation [a-z]{2,4}>.%%domain%%"
#	domainMask: "[!<www www.>][!<language ([a-z]{2}|www)>.]<host [a-z\\.]+>"

	googleAnalytics:
		code: false

	projectEmail: 'info@tralandia.com'
	testerEmail: 'toth.radoslav@gmail.com'


	maxReservationCountPerDay: 10
	rentalCountOnHome: 99
	rentalCountOnRootHome: 135

	staticDomain: "http://tralandiastatic.com"
	storageDir: /../../static
	storagePath: ''

	settingsDir: %appDir%/configs
	rentalImageDir: %storageDir%/rental_images
	rentalImagePath: %storagePath%/rental_images
	rentalPricelistDir: %storageDir%/rental_pricelists
	rentalPricelistPath: %storagePath%/rental_pricelists

	webTempDir: /webtemp
	webTempPath: /webtemp

	memcachePrefix: tralandia_

	cacheDatabase:
		user: root
		password: root
		host: 127.0.0.1
		database: tralandia_cache
		charset: utf8
		lazy: TRUE

	smtp:
		host: mail.tralandia.com
		username: robot@tralandia.com
		password: R03OT



	templateCache:
		enabled: TRUE
		header: #zle sa generovali linky na prepinanie jazyka
			enabled: FALSE
			if: '[!userLoggedIn]'
			key: '[language]_[primaryLocation]'
			expiration: 'tomorrow'
			tags: ['[name]']
		footer:
			enabled: TRUE
			key: '[language]_[primaryLocation]'
			expiration: 'tomorrow'
			tags: ['[name]']
		searchBar:
			enabled: TRUE
			key: '[language]_[primaryLocation]_[zeroSearch]'
			expiration: 'tomorrow'
			tags: ['[name]']
		searchLinks:
			enabled: true
			if: '[zeroSearch]' # '[!urlWithGet]'
			key: '[language]_[primaryLocation]_[zeroSearch]' # '[url]'
			expiration: 'tomorrow'
			tags: ['[name]']
		rentalBrick:
			enabled: true
			key: '[language]_rental/[rental]'
			expiration: '+1 month'
			tags: ['[name]']
		rentalDetail:
			enabled: ture
			key: '[language]_rental/[rental]'
			expiration: '+1 month'
			tags: ['[name]']
		home:
			enabled: TRUE
			key: '[language]_[primaryLocation]'
			expiration: 'tomorrow'
			tags: ['[name]']
		rootHome:
			enabled: TRUE
			key: '[language]_rootHome'
			expiration: 'tomorrow'
			tags: ['[name]']
		rootCountries:
			enabled: TRUE
			key: '[language]_rootCountries'
			expiration: 'tomorrow'
			tags: ['[name]']
		allDestinations:
			enabled: TRUE
			key: '[language]_[primaryLocation]'
			expiration: 'tomorrow'
			tags: ['[name]']
		registrationForm:
			enabled: TRUE
			#if: '[formSubmitted]' neda sa to evelvovat
			key: '[language]_[primaryLocation]'
			expiration: 'tomorrow'
			tags: ['[name]']

	facebookPage: http://www.facebook.com/Tralandia
	googlePlusProfile: https://plus.google.com/115691730730719504032/posts
	twitterProfile: https://twitter.com/Tralandia

	defaultImage: '/default.jpg'


doctrine:
	user: root
	password: root
	host: 127.0.0.1
	dbname: tralandia
	charset: utf8
	driver: pdo_mysql
	debugger: false
	autoGenerateProxyClasses: true
	metadata:
		Entity: %appDir%/models

console:
	url: http://www.com.tra.com/

presenter:
	configsDir: %appDir%/configs/presenters

services:

	# STORAGE
	rentalPricelistStorage: Extras\FileStorage(%wwwDir%%rentalPricelistDir%)

	# CACHE
	frontRouteCache: Nette\Caching\Cache(@cacheStorage, 'FrontRoute')
	templateCache: Nette\Caching\Cache(@templateCacheStorage, 'Nette.Templating.Cache')
	aclCache: Nette\Caching\Cache(@cacheStorage, 'Acl')
	routerCache: Nette\Caching\Cache(@cacheStorage, 'Router')
	translatorCache: Nette\Caching\Cache(@cacheStorage, 'Translator')
	rentalSearchCache: Extras\Cache\Cache(@searchCacheStorage, 'RentalSearchCache')
	rentalOrderCache: Extras\Cache\Cache(@searchCacheStorage, 'RentalOrderCache')
	googleGeocodeLimitCache: Nette\Caching\Cache(@googleGeocodeLimitCacheStorage, 'limit')


	cacheStorage:
#		class: Nette\Caching\Storages\FileStorage(%tempDir%)
		class: Nette\Caching\Storages\MemcachedStorage('127.0.0.1', '11211', %memcachePrefix%)


	nullStorage:
		class: \Nette\Caching\Storages\DevNullStorage
		autowired: false

	dibiConnection:
		class: \DibiConnection(%cacheDatabase%)

	templateCacheClient:
		class: \Tralandia\Caching\Database\DatabaseClient(@dibiConnection, 'template')
		autowired: false

	templateCacheStorage:
		class: \Tralandia\Caching\Database\DatabaseStorage(@templateCacheClient)
		autowired: false

	serchCacheClient:
		class: \Tralandia\Caching\Database\DatabaseClient(@dibiConnection, 'search')
		autowired: false

	searchCacheStorage:
		class: \Tralandia\Caching\Database\DatabaseStorage(@serchCacheClient)
		autowired: false

	googleGeocodeLimitCacheClient:
		class: \Tralandia\Caching\Database\DatabaseClient(@dibiConnection, 'googleGeocodeLimit')
		autowired: false

	googleGeocodeLimitCacheStorage:
		class: \Tralandia\Caching\Database\DatabaseStorage(@googleGeocodeLimitCacheClient)
		autowired: false

#	nette.mailer: EmailerMailer(@environment::getPrimaryLocation(), ...)
#	nette.mailer: \Mail\SendmailMailer(@environment::getPrimaryLocation(), ...)
	nette.mailer: \Mail\SmtpMailer(%smtp%, @environment::getPrimaryLocation(), ...)

	tester: Tester\Options(%testerEmail%, ...)
#	tester: Tester\NoTester

	# SEARCH
	rentalSearchService:
		factory: @rentalSearchServiceFactory::create(@environment::getPrimaryLocation())

	favoriteList: FavoriteList(@doctrine.dao(Entity\Rental\Rental))
	lastSearch: LastSearch(@session::getSection('lastSearch'))
	lastSeen: LastSeen(@doctrine.dao(Entity\Rental\Rental))

	# ROUTER
	routerFactory:
		class: Routers\RouterFactory(%domainMask%, [defaultLanguage: %centralLanguage%, defaultPrimaryLocation: 46])
		setup:
			- $locationDao(@doctrine.dao(Entity\Location\Location))
			- $languageDao(@doctrine.dao(Entity\Language))

	router: @routerFactory::create

	nette.presenterFactory:
		factory: Extras\Presenter\Factory::factory(%appDir%, %tempDir%/presenters, @container)
		class: Extras\Presenter\Factory


	user:
		class: \Tralandia\Security\User
		setup:
			- "?->getAuthorizator()->buildAssertions(?);"(@self, @self)

	authenticator: Security\Authenticator(@doctrine.dao(Entity\User\User))

	authorizator: Security\SimpleAcl(@doctrine.dao(Entity\User\Role))

	environment:
		class: Environment\Environment
		factory: Environment\Environment::createFromRequest(@application::getRequests())

	locale:
		class: Environment\Locale
		factory: @environment::getLocale()

	collator: @locale::getCollator()

	translator: @environment::getTranslator()


	# --------------------------------

	templateHelpers:
		class: Extras\Helpers
		setup:
			- $rentalImageDir(%rentalImageDir%)

	generatePathSegmentsRobot: Robot\GeneratePathSegmentsRobot
	createMissingTranslationsRobot: Robot\CreateMissingTranslationsRobot

	phoneBook: Extras\Books\Phone(@doctrine.dao(Entity\Contact\Phone), @doctrine.dao(Entity\Location\Location))

	itemTextFactory: Extras\FormMask\Items\Foctories\TextFactory
	itemPhraseFactory: Extras\FormMask\Items\Foctories\PhraseFactory(@phraseDecoratorFactory, @environment::getLanguage())
	itemAdvancedPhraseFactory: Extras\FormMask\Items\Foctories\AdvancedPhraseFactory(@environment)
	itemReadOnlyPhraseFactory: Extras\FormMask\Items\Foctories\ReadOnlyPhraseFactory(@environment)
	itemYesNoFactory: Extras\FormMask\Items\Foctories\YesNoFactory
	itemJsonFactory: Extras\FormMask\Items\Foctories\JsonFactory
	itemNeonFactory: Extras\FormMask\Items\Foctories\NeonFactory
	itemTextareaFactory: Extras\FormMask\Items\Foctories\TextareaFactory
	itemPriceFactory: Extras\FormMask\Items\Foctories\PriceFactory
	itemSelectFactory: Extras\FormMask\Items\Foctories\SelectFactory(@translator)
	itemCheckboxFactory: Extras\FormMask\Items\Foctories\CheckboxFactory
	itemTinymceFactory: Extras\FormMask\Items\Foctories\TinymceFactory

	# ==============================
	# ==================== SERVICES
	# ==============================
	transliterator:
		class: \Transliterator
		factory: Transliterator::create("Any-Latin; NFD; [:Nonspacing Mark:] Remove; NFC")

	googleGeocodeService: GoogleGeocodeServiceV3(@googleServiceCommunicator)
	googleServiceCommunicator: CurlCommunicator

	polygonService: Service\PolygonService
	rentalRegistrationsStats: Service\Statistics\RentalRegistrations
	rentalCreator: Service\Rental\RentalCreator
	addressCreator: Service\Contact\AddressCreator
	userCreator: User\UserCreator
	findOrCreateUser: User\FindOrCreateUser(@doctrine.dao(Entity\User\User))

	addressNormalizer: Service\Contact\AddressNormalizer


	rentalImageStorage: Image\RentalImageStorage(%wwwDir%%rentalImageDir%)
	rentalImagePipe: Image\RentalImagePipe(%rentalImagePath%, %staticDomain%)
	rentalImageManager: Image\RentalImageManager(@doctrine.dao(Entity\Rental\Image))
	rentalPriceListManager: RentalPriceListManager(@doctrine.dao(Entity\Rental\Pricelist), @rentalPricelistStorage)
	rentalPriceListPipe: Image\RentalPriceListPipe(%rentalPricelistPath%, %staticDomain%)
	- Tralandia\Rental\RankCalculator
	- Tralandia\Rental\Discarder
	- Tralandia\Rental\BanListManager

	searchOptionGenerator: SearchGenerator\OptionGenerator
	searchGeneratorTopLocations: SearchGenerator\TopLocations(@environment::getPrimaryLocation())
	searchGeneratorSpokenLanguages: SearchGenerator\SpokenLanguages(@environment::getPrimaryLocation())

	reservationProtector:
		class: ReservationProtector
		setup:
			- setReservationCountPerDay(%maxReservationCountPerDay%)

	html2texy: Html2texy
	translationTexy: TranslationTexy

	shareLinks:
		class: ShareLinks
		setup:
			- setPages(%facebookPage%, %twitterProfile%, %googlePlusProfile%)

	statistics.dictionary:
		class: Statistics\Dictionary
	statistics.registrations:
		class: Statistics\Registrations
	statistics.reservations:
		class: Statistics\Reservations

	dictionary.updateTranslationStatus: Dictionary\UpdateTranslationStatus
	dictionary.updateTranslationVariations: Dictionary\UpdateTranslationVariations
	dictionary.findOutdatedTranslations: Dictionary\FindOutdatedTranslations
	dictionary.phraseManager: Tralandia\Dictionary\PhraseManager


	phraseCreator: Service\Phrase\PhraseCreator
	phraseRemover: Service\Phrase\PhraseRemover

	device: Device
	deviceDetect: Mobile_Detect


	updateTranslationStatusRobot: Robot\UpdateTranslationStatusRobot

	resultSorter: ResultSorter

	# ==============================
	# ====================
	# ==============================

	allLanguages: AllLanguages

	# ==============================
	# ==================== DATA SOURCES
	# ==============================

	amenityDataSource: DataSource\AmenityDataSource(@doctrine.dao(Entity\Rental\Amenity))
	countryDataSource: DataSource\CountryDataSource(@doctrine.dao(Entity\Location\Location))
	localityDataSource: DataSource\LocalityDataSource(@doctrine.dao(Entity\Location\Location))
	regionDataSource: DataSource\RegionDataSource(@doctrine.dao(Entity\Location\Location))
	dictionaryManagerDataSource: DataSource\DictionaryManagerDataSource
	rentalDataSourceFactory: DataSource\RentalDataSource


	# ==============================
	# ==================== FORMS HANDLERS
	# ==============================
	registrationHandler:
		class: FormHandler\RegistrationHandler


	# ==============================
	# ==================== Components
	# ==============================
	calendarControl: BaseModule\Components\CalendarControl

	searchBarControl: FrontModule\Components\SearchBar\SearchBarControl()

	rootCountriesControl: FrontModule\Components\RootCountries\RootCountriesControl(@translator)


	# ==============================
	# ==================== Components/Registrator
	# ==============================
	- \Tralandia\Harvester\ProcessingData(@googleGeocodeLimitCache, ...)
	- \Tralandia\Harvester\RegistrationData
	- \Tralandia\Harvester\MergeData
	- \Tralandia\Harvester\HarvestedContacts(@doctrine.dao(Entity\HarvestedContact))


	############################################################
	#==========================================================#
	#====================== REFACTORING =======================#
	#==========================================================#
	############################################################

	- \Tralandia\Amenity\Amenities(@doctrine.dao(Entity\Rental\Amenity), @doctrine.dao(Entity\Rental\Amenity))
	- \Tralandia\Dictionary\FulltextSearch(@doctrine.dao(Entity\Phrase\Translation))
	- \Tralandia\Language\Languages(@doctrine.dao(Entity\Language))
	- \Tralandia\Language\SupportedLanguages
	- \Tralandia\Location\Countries(@doctrine.dao(Entity\Location\Location))
	- \Tralandia\Location\Locations(@doctrine.dao(Entity\Location\Location), @doctrine.dao(Entity\Location\Type), ...)
	- \Tralandia\Phrase\Phrases(@doctrine.dao(Entity\Phrase\Phrase))
	- \Tralandia\Phrase\Translations(@doctrine.dao(Entity\Phrase\Translation))
	- \Tralandia\Placement\Placements(@doctrine.dao(Entity\Rental\Placement))
	- \Tralandia\Rental\Rentals(@doctrine.dao(Entity\Rental\Rental), @doctrine.dao(Entity\Location\Location))
	- \Tralandia\Rental\Types(@doctrine.dao(Entity\Rental\Type))
	- \Tralandia\Reservation\Reservations(@doctrine.dao(Entity\User\RentalReservation))
	- \Tralandia\Routing\PathSegments(@doctrine.dao(Entity\Routing\PathSegment), @doctrine.dao(Entity\Routing\PathSegmentOld))

	# ==========================================================
	# ==========================================================

	- [class: \Tralandia\Console\EmailManagerCommand, tags: [kdyby.console.command]]


factories:
	# ==============================
	# ==================== FORMS
	# ==============================

	simpleForm:
		class: BaseModule\Forms\SimpleForm
		implement: BaseModule\Forms\ISimpleFormFactory

#	rentalEditFormFactory:
#		class: OwnerModule\Forms\RentalEditForm(%rental%)
#		implement: OwnerModule\Forms\IRentalEditFormFactory

	userEditFormFactory:
		class: OwnerModule\Forms\UserEditForm(%user%, @doctrine.dao(Entity\User\User))
		parameters: [Entity\User\User user]
		implement: OwnerModule\Forms\IUserEditFormFactory

	signInFormFactory:
		class: BaseModule\Forms\Sign\InForm
		implement: BaseModule\Forms\Sign\IInFormFactory

	forgotPasswordFormFactory:
		class: BaseModule\Forms\ForgotPasswordForm(@doctrine.dao(Entity\User\User))
		implement: BaseModule\Forms\IForgotPasswordFormFactory

	rentalReservationFormFactory:
		class: FrontModule\Forms\Rental\ReservationForm(%rental%)
		parameters: [Entity\Rental\Rental rental]
		implement: FrontModule\Forms\Rental\IReservationFormFactory

#	contactFormFactory:
#		class: FrontModule\Forms\ContactForm(%user%, %language%, @ticketDao)
#		parameters: [\Entity\User\User user = NULL, \Entity\Language language = NULL]
#		implement: FrontModule\Forms\IContactFormFactory

	ticketFormFactory:
		class: FrontModule\Forms\TicketForm(%user%, %ticket%, @doctrine.dao(Entity\Ticket\Message), @doctrine.dao(Entity\Faq\Question))
		parameters: [Entity\User\User user, Entity\Ticket\Ticket ticket]
		implement: FrontModule\Forms\ITicketFormFactory

	registrationFormFactory:
		class: FrontModule\Forms\RegistrationForm(%environment%, %presenter%)
		parameters: [Environment\Environment environment, Nette\Application\UI\Presenter presenter]
		implement: FrontModule\Forms\IRegistrationFormFactory

	rentalEditFormFactory:
		class: OwnerModule\Forms\RentalEditForm(%rental%, %environment%)
		parameters: [Entity\Rental\Rental rental, Environment\Environment environment]
		implement: OwnerModule\Forms\IRentalEditFormFactory

	searchFormFactory:
		class: FrontModule\Forms\SearchForm(%defaults%, %search%, %presenter%)
		parameters: [array defaults, Service\Rental\RentalSearchService search, Nette\Application\UI\Presenter presenter]
		implement: FrontModule\Forms\ISearchFormFactory

	rentalContainerFactory:
		class: Extras\Forms\Container\RentalContainer(%environment%, %rental%)
		parameters: [Environment\Environment environment, Entity\Rental\Rental rental = NULL]
		implement: Extras\Forms\Container\IRentalContainerFactory

	rentalEditHandlerFactory:
		class: FormHandler\RentalEditHandler(%rental%)
		parameters: [Entity\Rental\Rental rental]
		implement: FormHandler\IRentalEditHandlerFactory

	# ==============================
	# ==================== COMPONENTS
	# ==============================
	headerControlFactory:
		class: BaseModule\Components\HeaderControl(%pageSeo%, %user%)
		parameters: [Service\Seo\SeoService pageSeo, Entity\User\User user = NULL]
		implement: BaseModule\Components\IHeaderControlFactory

	navigationControlFactory:
		class: AdminModule\Components\NavigationControl(%user%)
		parameters: [Nette\Security\User user]
		implement: AdminModule\Components\INavigationControlFactory

	# ==============================
	# ==================== ROUTERS
	# ==============================
	simpleRouteFactory:
		class: Routers\SimpleRoute
		arguments: [%mask%, %metadata%, ... ]
		parameters: [mask, metadata]
		setup:
			- $pageDao(@doctrine.dao(Entity\Page))
		implement: Routers\ISimpleRouteFactory

	baseRouteFactory:
		class: Routers\BaseRoute
		arguments: [%mask%, %metadata%, ... ]
		parameters: [mask, metadata]
		implement: Routers\IBaseRouteFactory

	frontRouteFactory:
		class: Routers\FrontRoute
		arguments: [ %domainMask%, ... ]
		setup:
			- $locationDao(@doctrine.dao(Entity\Location\Location))
			- $languageDao(@doctrine.dao(Entity\Language))
			- $rentalDao(@doctrine.dao(Entity\Rental\Rental))
			- $rentalTypeDao(@doctrine.dao(Entity\Rental\Type))
			- $rentalAmenityDao(@doctrine.dao(Entity\Rental\Amenity))
			- $rentalPlacementDao(@doctrine.dao(Entity\Rental\Placement))
			- $routingPathSegmentDao(@doctrine.dao(Entity\Routing\PathSegment))
			- $domainDao(@doctrine.dao(Entity\Domain))
			- $pageDao(@doctrine.dao(Entity\Page))
			- $favoriteListDao(@doctrine.dao(Entity\FavoriteList))
			- $pageDao(@doctrine.dao(Entity\Page))
#			- setCache(@frontRouteCache)
		implement: Routers\IFrontRouteFactory


	# ==============================
	# ==================== CACHE
	# ==============================
	# searchCacheFactory:
	# 	class: Extras\Cache\Cache(@cacheStorage, %namespace%)
	# 	implement: Extras\Cache\ISearchCacheFactory

	rentalSearchCachingFactory:
		class: Extras\Cache\RentalSearchCaching(%location%, @rentalSearchCache)
		parameters: [Entity\Location\Location location]
		implement: Extras\Cache\IRentalSearchCachingFactory

	rentalOrderCachingFactory:
		class: Extras\Cache\RentalOrderCaching(%location%, @doctrine.dao(Entity\Location\Location), @rentalOrderCache)
		parameters: [Entity\Location\Location location]
		implement: Extras\Cache\IRentalOrderCachingFactory

	# ==============================
	# ==================== SERVICES
	# ==============================
	rentalSearchServiceFactory:
		class: Service\Rental\RentalSearchService(%location%, @rentalSearchCache, @doctrine.dao(Entity\Rental\Rental))
		parameters: [Entity\Location\Location location]
		implement: Service\Rental\IRentalSearchServiceFactory

	seoServiceFactory:
		class: Service\Seo\SeoService
		arguments: [%url%, %request%, @doctrine.dao(Entity\Page)]
		parameters: [url, Nette\Application\Request request]
		implement: Service\Seo\ISeoServiceFactory

	updateRentalSearchCacheRobotFactory:
		class: Robot\UpdateRentalSearchCacheRobot(%location%)
		parameters: [Entity\Location\Location location]
		implement: Robot\IUpdateRentalSearchCacheRobotFactory

	translatorFactory:
		class: Tralandia\Localization\Translator(%language%, @doctrine.dao(Entity\Phrase\Phrase), @translatorCache)
		parameters: [Entity\Language language]
		implement: Tralandia\Localization\ITranslatorFactory

	environmentFactory:
		class: Environment\Environment(%location%, %language%)
		parameters: [Entity\Location\Location location, Entity\Language language]
		implement: Environment\IEnvironmentFactory

	emailCompilerFactory:
		class: Mail\Compiler(%environment%)
		parameters: [Environment\Environment environment]
		implement: Mail\ICompilerFactory

	itemMapFactory: Extras\FormMask\Items\Foctories\MapFactory
	itemAddressFactory: Extras\FormMask\Items\Foctories\AddressFactory(@translator, @doctrine.dao(Entity\Contact\Address))


	# ==============================
	# ==================== G R I D S
	# ==============================

	rentalGridFactory:
		class: AdminModule\Grids\RentalGrid
		implement: AdminModule\Grids\IRentalGridFactory

	rentalTypeGridFactory:
		class: AdminModule\Grids\RentalTypeGrid(@doctrine.dao(Entity\Rental\Type))
		implement: AdminModule\Grids\IRentalTypeGridFactory

	amenityGridFactory:
		class: AdminModule\Grids\AmenityGrid
		implement: AdminModule\Grids\IAmenityGridFactory

	amenityTypeGridFactory:
		class: AdminModule\Grids\AmenityTypeGrid(@doctrine.dao(Entity\Rental\AmenityType))
		implement: AdminModule\Grids\IAmenityTypeGridFactory

	currencyGridFactory:
		class: AdminModule\Grids\CurrencyGrid(@doctrine.dao(Entity\Currency))
		implement: AdminModule\Grids\ICurrencyGridFactory

	domainGridFactory:
		class: AdminModule\Grids\DomainGrid(@doctrine.dao(Entity\Domain))
		implement: AdminModule\Grids\IDomainGridFactory

	languageGridFactory:
		class: AdminModule\Grids\LanguageGrid(@doctrine.dao(Entity\Language))
		implement: AdminModule\Grids\ILanguageGridFactory

	countryGridFactory:
		class: AdminModule\Grids\CountryGrid
		implement: AdminModule\Grids\ICountryGridFactory

	regionGridFactory:
		class: AdminModule\Grids\RegionGrid
		implement: AdminModule\Grids\IRegionGridFactory

	localityGridFactory:
		class: AdminModule\Grids\LocalityGrid
		implement: AdminModule\Grids\ILocalityGridFactory

	locationTypeGridFactory:
		class: AdminModule\Grids\LocationTypeGrid(@doctrine.dao(Entity\Location\Type))
		implement: AdminModule\Grids\ILocationTypeGridFactory

	phraseTypeGridFactory:
		class: AdminModule\Grids\PhraseTypeGrid(@doctrine.dao(Entity\Phrase\Type))
		implement: AdminModule\Grids\IPhraseTypeGridFactory

	phraseCheckingCentralGridFactory:
		class: AdminModule\Grids\PhraseCheckingCentralGrid(@doctrine.dao(Entity\Phrase\Phrase))
		implement: AdminModule\Grids\IPhraseCheckingCentralGridFactory

	phraseCheckingSupportedGridFactory:
		class: AdminModule\Grids\PhraseCheckingSupportedGrid
		arguments: [@doctrine.dao(Entity\Phrase\Phrase), @dictionary.findOutdatedTranslations, @doctrine.dao(Entity\Language), @translator, @collator]
		implement: AdminModule\Grids\IPhraseCheckingSupportedGridFactory

	statisticsDictionaryGridFactory:
		class: AdminModule\Grids\Statistics\DictionaryGrid
		implement: AdminModule\Grids\Statistics\IDictionaryGridFactory

	statisticsRegistrationsGridFactory:
		class: AdminModule\Grids\Statistics\RegistrationsGrid
		implement: AdminModule\Grids\Statistics\IRegistrationsGridFactory

	statisticsReservationsGridFactory:
		class: AdminModule\Grids\Statistics\ReservationsGrid
		implement: AdminModule\Grids\Statistics\IReservationsGridFactory

	statisticsRentalEditGridFactory:
		class: AdminModule\Grids\Statistics\RentalEditGrid
		arguments: [@doctrine.dao(Entity\Rental\EditLog)]
		implement: AdminModule\Grids\Statistics\IRentalEditGridFactory

	dictionaryManagerGridFactory:
		class: AdminModule\Grids\Dictionary\ManagerGrid
		implement: AdminModule\Grids\Dictionary\IManagerGridFactory

includes:
	- webLoader.neon
	- modelServices.neon
	- listeners.neon
