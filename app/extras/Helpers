<?php
namespace Extras;

class Helpers extends \Nette\Templating\Helpers {

/*
	public function ulListHelper($data, $columnCount = 3, $li = NULL, $columnLimit = 0) {
		if(!($data instanceof \Traversable || is_array($data))) {
			throw new \Nette\InvalidArgumentException('Argument "$data" does not match with the expected value');
		}

		if(!is_numeric($columnCount) || $columnCount <= 0) {
			throw new \Nette\InvalidArgumentException('Argument "$columnCount" does not match with the expected value');
		}

		if($li === NULL) {
			$li = '<li>%name% - {_123}</li>';
		}

		preg_match_all('/%[a-zA-Z\._]+%/', $li, $matches);

		$replaces = array();

		foreach ($matches[0] as $match) {

			$translate = false;
			$matchKey = $match;
			if (strpos($match, '_')) {
				$translate = true;
				$matchKey = str_replace('_', '', $match);
			}

			if (gettype(current($data))=='object') {
				$value = '$item->'.str_replace('.', '->', substr($matchKey, 1, -1));
			} else {
				$value = '$item["'.str_replace('.', '"]["', substr($matchKey, 1, -1)).'"]';
			}

			if ($translate) {
				$value = '$this->template->translate('.$value.')';
			}

			$replaces[$match] = $value;
		}

		$newData = array();

		$i=1;
		$counter=0;
		foreach ($data as $k=>$item) {
			$search = array();
			$replace = array();
			foreach ($replaces as $key => $value) {
				$search[] = $key;
				eval('$r = '.$value.';');
				$replace[] = $r;
			}
			$liTemp = str_replace($search, $replace, $li);
			$row = ($i<=$columnCount)?$i:$i=1;
			$newData[$row][] = $liTemp;
			$i++;
			$counter++;
			if ($columnLimit!=0 && ($columnLimit*$columnCount)<=$counter) break;
		}

		$html = \Nette\Utils\Html::el();
		foreach ($newData as $key => $value) {
			$ul = \Nette\Utils\Html::el('ul');
			$ul->add(implode('', $value));
			$html->add($ul);
		}

		return $html;
	}

	public function countHelper($data) {
		return count($data);
	}
*/

}